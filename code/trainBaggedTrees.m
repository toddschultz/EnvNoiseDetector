function trainedClassifier = trainBaggedTrees(xfeatures,xresponses)
% [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% returns a trained classifier and its accuracy. This code recreates the
% classification model trained in Classification Learner app. Use the
% generated code to automate training the same model with new data, or to
% learn how to programmatically train models.
%
%  Input:
%      xfeatures: a numeric matrix with the features
%      xresponses: a logical vector of the known responses or classes
%      nlearn = number of learners (number of trees)
%      maxsplits = maximum number of splits
%
%  Output:
%      trainedClassifier: a struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier. The field 'Performance' contains the 4 performance
%       metrics of accuracy, false postive rate, false negative rate, and
%       the F1 score. 
%
%      trainedClassifier.predictFcn: a function to make predictions on new
%       data.
%
% Use the code to train the model with new data. To retrain your
% classifier, call the function from the command line with your original
% data or new data as the input argument trainingData.
%
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationScores] = trainClassifier(T,nlearn,maxsplits)
%
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   yfit = trainedClassifier.predictFcn(T2)
%
% T2 must be a matrix containing only the predictor columns used for
% training. For details, enter:
%   trainedClassifier.HowToPredict

% Auto-generated by MATLAB on 18-Feb-2019 13:58:59
% Modified by Todd Schultz

%% Set parallel option
useparpool = ~isempty(gcp);

%% Extract predictors and response
% Train a classifier
% This code specifies all the classifier options and trains the classifier
% using Bayesian hyperparameter optimization with 5-fold cross validation.

classificationEnsemble = fitcensemble(...
    xfeatures, ...
    xresponses, ...
    'OptimizeHyperparameters','all', ...
    'HyperparameterOptimizationOptions',struct('UseParallel',useparpool,'MaxObjectiveEvaluations',60,'KFold',5));

% {'NumLearningCycles','LearnRate','MaxNumSplits','MinLeafSize','NumVariablesToSample','SplitCriterion}

% Create the result struct with predict function
trainedClassifier.predictFcn = @(x) predict(classificationEnsemble, x);

% Add additional fields to the result struct
trainedClassifier.ClassificationEnsemble = classificationEnsemble;
trainedClassifier.About = 'This struct is a trained model from trainBaggedTrees function.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new predictor column matrix, X, use: \n  yfit = c.predictFcn(X) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nX must contain exactly 49 columns because this model was trained using 49 predictors. \nX must contain only predictor columns in exactly the same order and format as your training \ndata. Do not include the response column or any columns you did not import into the app. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Estimate performance metrics
% Only works with Bag classifier
xpredict = oobPredict(classificationEnsemble);
[acc,fpr,fnr,f1] = scoreModel(xresponses,xpredict);
trainedClassifier.Performance.Accuracy = acc;
trainedClassifier.Performance.F1score = f1;
trainedClassifier.Performance.FalsePostiveRate = fpr;
trainedClassifier.Performance.FalseNegativeRate = fnr;

end