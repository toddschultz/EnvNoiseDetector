function [trainedClassifier, validationAccuracy, validationPredictions, validationScores] = trainCubicSvmClassifier(trainingData, kernelScale, boxConstraint)
% [trainedClassifier, validationAccuracy, validationPredictions, validationScores] = trainClassifier(trainingData)
% returns a trained classifier and its accuracy. This code was generated by 
% the Classification Learner app.
%
%  Input:
%      trainingData: a table containing 26 predictors labeled feature1
%       through feature26 and a response variable labeled contaminated. The
%       class column is expected to be of the set [0 1] where 1 is
%       contaminated.
%
%      kernelScale: the value of the KernelScale parameter for the SVM
%
%      boxConstraint: the value of the BoxConstraint parameter for the SVM
%
%  Output:
%      trainedClassifier: a struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
%
%      trainedClassifier.predictFcn: a function to make predictions on new
%       data.
%
%      validationAccuracy: a double containing the accuracy in percent.
%
%      validationPredictions: an array representing the predicted class of
%      each row of the trainingData
%
%      validationScores: an array of doubles representing the cross
%      validation score of the model.
%
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationAccuracy] = trainCubicSvmClassifier(trainingData, kernelScale, boxConstraint)
%
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   yfit = trainedClassifier.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedClassifier.HowToPredict

% Auto-generated by MATLAB on 11-Feb-2019 18:38:02


% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'feature1', 'feature2', 'feature3', 'feature4', ...
    'feature5', 'feature6', 'feature7', 'feature8', 'feature9', ...
    'feature10', 'feature11', 'feature12', 'feature13', 'feature14', ...
    'feature15', 'feature16', 'feature17', 'feature18', 'feature19', ...
    'feature20', 'feature21', 'feature22', 'feature23', 'feature24', ...
    'feature25', 'feature26'};
predictors = inputTable(:, predictorNames);
response = inputTable.contaminated;

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
classificationSVM = fitcsvm(...
    predictors, ...
    response, ...
    'KernelFunction', 'polynomial', ...
    'PolynomialOrder', 3, ...
    'KernelScale', kernelScale, ...
    'BoxConstraint', boxConstraint, ...
    'Standardize', true, ...
    'ClassNames', [0; 1]);

% Create the result struct with predict function
predictorExtractionFcn = @(t) t(:, predictorNames);
svmPredictFcn = @(x) predict(classificationSVM, x);
trainedClassifier.predictFcn = @(x) svmPredictFcn(predictorExtractionFcn(x));

% Add additional fields to the result struct
trainedClassifier.RequiredVariables = predictorNames;
trainedClassifier.ClassificationSVM = classificationSVM;
trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2018b.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Perform cross-validation
partitionedModel = crossval(trainedClassifier.ClassificationSVM, ...
    'KFold', ...
    5);

% Compute validation predictions
[validationPredictions, validationScores] = kfoldPredict(partitionedModel);

% Compute validation accuracy
validationAccuracy = 1 - kfoldLoss(partitionedModel, ...
    'LossFun', ...
    'ClassifError');
