function [y1] = myNeuralNetworkFunction_Hampel_10lr(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 05-Feb-2019 09:55:40.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx17 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [8.48168408813866;2.96862978565616;2.32636621682974;2.55580229900284;2.37090993349968;2.39922466428997;2.55208041754496;3.03408301474869;4.15133623979688e-10;2.27668819567629e-10;2.22298057057336e-10;7.06908830859854e-07;2.36567346063721e-05;3.01238782572742e-05;3.35867399918165e-05;4.23556758841535e-05;-79393.3105830797];
x1_step1.gain = [0.750001701199587;0.255004450309903;0.235702698898398;0.242397009026374;0.237102961445633;0.237628657668443;0.241917914848335;0.244908007925351;133380.99063608;1983.15431818527;315.58597734067;36.7708923707354;70.7785314390506;31.5149381883378;15.8272716429321;8.89090477650183;2.45632758176022e-05];
x1_step1.ymin = -1;

% Layer 1
b1 = [-14.901362172099023695;6.6791127616677226086;-16.812661816676495619;-4.1376418309865723444;-6.4720249253128399047;14.3062236771494522;-0.49502777101348371946;7.3579019440406501218;2.1941640680210605652;17.886423994591883257];
IW1_1 = [1.2052715701061846865 0.79589902812677038035 0.36789781866891857476 -0.71662708321309998016 -3.2561416174834993953 5.6796914450703717137 -0.11423502822981454474 -0.8717149058553534946 -5.7882992150862904168 -2.7168666077454588503 9.3130884954387678221 -1.6591423135531837563 -14.223557556331501317 -13.984369708647834685 4.3796806027722494647 6.6572875528363981701 -7.7056163208423464894;1.1581360114325702781 -1.7728161805798443584 -0.85347296428474872521 -0.57591366100616936397 -1.8200753628641519466 4.7670559630864763889 -14.869124385182537651 5.9019361973451083259 3.304782976462126598 6.2298725364758151812 -11.02479452061050047 5.6005745591355591273 -13.679751704523807732 2.4904723236565815547 -6.9658043595761212075 21.517462227036482147 9.0202277628684637278;0.12525853164077857538 0.79343002100542103783 -0.87093649800718897502 1.0194460952062214254 0.84382913285630090083 1.9998941361365307756 -2.3707902506436706602 15.24246206851298524 13.315702561599122689 16.813942148216540318 18.036649540442031281 -16.688749939751264861 3.8598846907072625889 -3.3887951431517535639 -24.443393246701365484 -17.333286227261776702 -10.830421276850636048;-1.0857281393732858277 2.3037023355013435122 0.7721743647410290734 0.39139421737630458731 2.1350178666034587138 -5.5313595547829113031 16.557120491054828193 -6.4914718947686571582 -2.9659633523734236782 6.5458109694472330631 2.1199048963964930437 -6.5068441518933219925 17.83421448067927173 -8.4821498629023110993 4.5945898110391345526 -17.841053433303574849 -9.6453784710522594281;-0.21191430382368081631 -0.57339423418961754653 -0.47767549547597287773 1.0012523296802269268 -9.3889638140102817943 -3.9669873351292195274 3.8398131500468011268 0.87582609104935005284 5.8257568021614982712 6.8565327189744271763 9.6342821631521058379 3.627384464471844705 -11.993346022271591522 -5.022816272258552317 -1.6767733931455472973 -5.0033577794665271554 0.65919866313531039204;0.013207232755137876881 -0.60803800612865999131 0.45468891238769004737 -1.2158988167568813843 -1.2240146016218969027 -0.40573455636022698334 -0.095808148445834628859 -9.3983719200037114661 -4.0524791222614471309 -14.465304936099025568 -13.690688663843115336 12.953310063426947352 8.2279145522683077019 -6.4689216254500196968 17.109765097649464849 15.292431721814610412 13.978874678945491183;0.69879705577149986429 0.6399329626802965354 0.36374864905130804837 -0.69064784008183144337 -4.1911612137113047893 5.3119635157361155819 -0.0011026045115399216168 0.60665376539093840424 4.4408213532034110926 4.2578568043948168409 7.6654268069550495213 -1.6959962473694167873 -19.309278704987434594 -12.885912045454249508 2.5602997819230211007 10.605461965910047084 -8.9376791917899449658;-1.7525269689103362136 -0.94253572202445146111 -0.48433514320646059437 0.86980172116638854174 3.0979876788362687989 -6.9083398661744670477 0.14581444826624714861 2.1994267058183605279 16.452819666799712195 -15.694005696530954452 -10.104231980914354594 1.1375293996137973984 21.874665923660728595 5.8286997087085605784 -11.295712521506604986 1.2192944017633118303 6.7039260515433829468;0.045731263450836293072 0.9154971552970185833 0.5696546703190911165 -1.4913748903815324809 0.48034001145234084262 -3.6184354598323711372 -3.2161503338372092742 5.3871058967902758496 7.1059128933072157608 -6.1779293100605210398 -17.819064191401601249 -1.0227113322116918592 -9.764511538224031284 8.2812523545532474856 -6.1197019419136422513 26.634673893726034777 1.5888039051151745529;0.083313326581801863679 0.47297170005399880033 1.2525082871378379057 -2.2706100689839190387 0.39632251936381251989 -1.4866818582563934292 -3.3766484372218168453 5.0791350408972961716 -0.43607678329562038488 -18.128347201539956046 -18.061820724708471886 0.87185254817605883915 12.992148879421357321 1.8461465307253355217 14.416820589002298902 24.019394433415151013 0.80041532943740067996];

% Layer 2
b2 = -2.5988434138677174445;
LW2_1 = [20.347390243191867398 10.436973873414830294 -25.058837150188221443 8.8380506826762346151 -1.0295241766231983949 -16.367045486395817022 -8.788966286206234102 11.456618443504032356 -16.723950422714068509 9.1215355846372219162];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
